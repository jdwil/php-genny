<?php
/**
 * Copyright (c) 2017 JD Williams
 *
 * This file is part of PHP-Genny, a library built by JD Williams. PHP-Genny is free software; you can
 * redistribute it and/or modify it under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 3 of the License, or (at your option) any later version.
 *
 * PHP-Genny is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
 * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
 * Public License for more details. You should have received a copy of the GNU Lesser General Public
 * License along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * You should have received a copy of the GNU General Public License along with Unify. If not, see
 * <http://www.gnu.org/licenses/>.
 */

declare(strict_types=1);

namespace JDWil\PhpGenny\Builder\Node;

use JDWil\PhpGenny\Builder\Node\Traits\DocBlockTrait;
use JDWil\PhpGenny\Builder\Node\Traits\NestedNodeTrait;
use JDWil\PhpGenny\Builder\Node\Traits\NodeBehaviorTrait;
use PhpParser\Comment\Doc;

/**
 * Class Trait_
 */
class Trait_ extends AbstractNode implements HasNodeBehaviorInterface
{
    use NodeBehaviorTrait;
    use DocBlockTrait;
    use NestedNodeTrait;

    /**
     * @var AbstractNode[]
     */
    protected $nodes;

    /**
     * @var string
     */
    protected $name;

    /**
     * @param string $name
     * @return Trait_
     */
    public static function new(string $name): Trait_
    {
        $ret = new static();
        $ret->name = $name;
        $ret->nodes = [];

        return $ret;
    }

    /**
     * @param $trait
     * @return UseTrait
     */
    public function use($trait): UseTrait
    {
        if (is_string($trait)) {
            $trait = [$trait];
        }

        $ret = UseTrait::new($trait);
        $ret->setParent($this);
        $this->nodes[] = $ret;

        return $ret;
    }

    /**
     * @return string
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * @param string $name
     * @return Property
     */
    public function property(string $name): Property
    {
        $property = Property::new($name);
        $property->setParent($this);
        $property->copyBehaviorFrom($this);
        if ($this->autoGenerateDocBlocks) {
            $property->setComments(['@var mixed']);
        }
        $this->nodes[] = $property;

        return $property;
    }

    /**
     * @param string $name
     * @return Method
     */
    public function method(string $name): Method
    {
        $method = Method::new($name);
        $method->setParent($this);
        $this->nodes[] = $method;

        return $method;
    }

    /**
     * @return \PhpParser\Node\Stmt\Trait_
     */
    public function getStatements(): \PhpParser\Node\Stmt\Trait_
    {
        $ret = new \PhpParser\Node\Stmt\Trait_($this->name, [
            'stmts' => array_map(function (AbstractNode $node) {
                return $node->getStatements();
            }, $this->nodes)
        ]);

        if ($this->hasComment()) {
            $ret->setDocComment(new Doc($this->getComments()));
        }

        return $ret;
    }

    /**
     * @return AbstractNode[]
     */
    public function getNodes(): array
    {
        return $this->nodes;
    }
}
