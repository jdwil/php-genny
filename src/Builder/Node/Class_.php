<?php
declare(strict_types=1);

namespace JDWil\PhpGenny\Builder\Node;

use JDWil\PhpGenny\Builder\Builder;
use JDWil\PhpGenny\Builder\Node\Traits\AbstractTrait;
use JDWil\PhpGenny\Builder\Node\Traits\DocBlockTrait;
use JDWil\PhpGenny\Builder\Node\Traits\FinalTrait;
use JDWil\PhpGenny\Builder\Node\Traits\NestedNodeTrait;
use JDWil\PhpGenny\Builder\Node\Traits\NodeBehaviorTrait;
use PhpParser\Comment\Doc;
use PhpParser\Node\Name;
use PhpParser\Node\Stmt\Nop;

/**
 * Class Class_
 */
class Class_ extends AbstractNode implements HasNodeBehaviorInterface
{
    use NestedNodeTrait;
    use FinalTrait;
    use AbstractTrait;
    use NodeBehaviorTrait;
    use DocBlockTrait;

    /**
     * @var string
     */
    protected $name;

    /**
     * @var string
     */
    protected $extends;

    /**
     * @var array
     */
    protected $implements;

    /**
     * @var array
     */
    protected $nodes;

    /**
     * @param string $name
     * @return Class_
     */
    public static function new(
        string $name
    ): Class_ {
        $ret = new Class_();
        $ret->name = $name;
        $ret->abstract = false;
        $ret->final = false;
        $ret->extends = null;
        $ret->implements = [];

        return $ret;
    }

    /**
     * @return string
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * @return Builder|Namespace_
     * @throws \Exception
     */
    public function done()
    {
        if (!$this->parent instanceof Builder && !$this->parent instanceof Namespace_) {
            throw new \Exception('Parent of Class_ must be an instance of Builder or Namespace_');
        }

        return $this->parent;
    }

    /**
     * @return Class_
     */
    public function lineBreak(): Class_
    {
        $this->nodes[] = Node::new(Nop::class, []);

        return $this;
    }

    /**
     * @param string $name
     * @return $this
     */
    public function extends(string $name)
    {
        $this->extends = $name;

        return $this;
    }

    /**
     * @param string $name
     * @return $this
     */
    public function implements(string $name)
    {
        $this->implements[] = $name;

        return $this;
    }

    /**
     * @param string $name
     * @param AbstractNode $value
     * @return ClassConstant
     */
    public function constant(string $name, AbstractNode $value): ClassConstant
    {
        $constant = ClassConstant::new($name, $value);
        $constant->setParent($this);
        $this->nodes[] = $constant;

        return $constant;
    }

    /**
     * @param string $name
     * @return Property
     */
    public function property(string $name): Property
    {
        $property = Property::new($name);
        $property->setParent($this);
        $property->copyBehaviorFrom($this);
        if ($this->autoGenerateDocBlocks) {
            $property->setComments(['@var mixed']);
        }
        $this->nodes[] = $property;

        return $property;
    }

    /**
     * @param string $name
     * @return Method
     */
    public function method(string $name): Method
    {
        $method = Method::new($name);
        $method->setParent($this);
        $this->nodes[] = $method;

        return $method;
    }

    /**
     * @param $trait
     * @return UseTrait
     */
    public function use($trait): UseTrait
    {
        if (is_string($trait)) {
            $trait = [$trait];
        }

        $ret = UseTrait::new($trait);
        $ret->setParent($this);
        $this->nodes[] = $ret;

        return $ret;
    }

    /**
     * @return \PhpParser\Node\Stmt\Class_
     */
    public function getStatements(): \PhpParser\Node\Stmt\Class_
    {
        $flags = $this->addFinalFlag(0);
        $flags = $this->addAbstractFlag($flags);

        $params = [
            'flags' => $flags,
            'stmts' => array_map(function (AbstractNode $node) {
                return $node->getStatements();
            }, $this->nodes)
        ];

        if (null !== $this->extends) {
            $params['extends'] = new Name($this->extends);
        }

        if (!empty($this->implements)) {
            $params['implements'] = array_map(function ($str) {
                return new Name($str);
            }, $this->implements);
        }

        $ret = new \PhpParser\Node\Stmt\Class_($this->name, $params);
        if ($this->hasComment()) {
            $ret->setDocComment(new Doc($this->getComments()));
        }

        return $ret;
    }

    /**
     * @return array
     */
    public function getNodes(): array
    {
        return $this->nodes;
    }
}
