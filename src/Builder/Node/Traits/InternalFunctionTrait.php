<?php
declare(strict_types=1);

namespace JDWil\PhpGenny\Builder\Node\Traits;

use JDWil\PhpGenny\Builder\Node\Func;

/**
 * Trait InternalFunctionTrait
 *
 * @method eval($code)
 * @method zend_version()
 * @method func_num_args()
 * @method func_get_arg($arg_num)
 * @method func_get_args()
 * @method strlen($str)
 * @method strcmp($str1, $str2)
 * @method strncmp($str1, $str2, $len)
 * @method strcasecmp($str1, $str2)
 * @method strncasecmp($str1, $str2, $len)
 * @method each($arr)
 * @method error_reporting($new_error_level)
 * @method define($constant_name, $value, $case_insensitive)
 * @method defined($constant_name)
 * @method get_class($object)
 * @method get_called_class()
 * @method get_parent_class($object)
 * @method method_exists($object, $method)
 * @method property_exists($object_or_class, $property_name)
 * @method class_exists($classname, $autoload)
 * @method interface_exists($classname, $autoload)
 * @method trait_exists($traitname, $autoload)
 * @method function_exists($function_name)
 * @method class_alias($user_class_name, $alias_name, $autoload)
 * @method get_included_files()
 * @method get_required_files()
 * @method is_subclass_of($object, $class_name, $allow_string)
 * @method is_a($object, $class_name, $allow_string)
 * @method get_class_vars($class_name)
 * @method get_object_vars($obj)
 * @method get_class_methods($class)
 * @method trigger_error($message, $error_type)
 * @method user_error($message, $error_type)
 * @method set_error_handler($error_handler, $error_types)
 * @method restore_error_handler()
 * @method set_exception_handler($exception_handler)
 * @method restore_exception_handler()
 * @method get_declared_classes()
 * @method get_declared_traits()
 * @method get_declared_interfaces()
 * @method get_defined_functions()
 * @method get_defined_vars()
 * @method create_function($args, $code)
 * @method get_resource_type($res)
 * @method get_resources($type)
 * @method get_loaded_extensions($zend_extensions)
 * @method extension_loaded($extension_name)
 * @method get_extension_funcs($extension_name)
 * @method get_defined_constants($categorize)
 * @method debug_backtrace($options, $limit)
 * @method debug_print_backtrace($options, $limit)
 * @method gc_mem_caches()
 * @method gc_collect_cycles()
 * @method gc_enabled()
 * @method gc_enable()
 * @method gc_disable()
 * @method strtotime($time, $now)
 * @method date($format, $timestamp)
 * @method idate($format, $timestamp)
 * @method gmdate($format, $timestamp)
 * @method mktime($hour, $min, $sec, $mon, $day, $year)
 * @method gmmktime($hour, $min, $sec, $mon, $day, $year)
 * @method checkdate($month, $day, $year)
 * @method strftime($format, $timestamp)
 * @method gmstrftime($format, $timestamp)
 * @method time()
 * @method localtime($timestamp, $associative_array)
 * @method getdate($timestamp)
 * @method date_create($time, $object)
 * @method date_create_immutable($time, $object)
 * @method date_create_from_format($format, $time, $object)
 * @method date_create_immutable_from_format($format, $time, $object)
 * @method date_parse($date)
 * @method date_parse_from_format($format, $date)
 * @method date_get_last_errors()
 * @method date_format($object, $format)
 * @method date_modify($object, $modify)
 * @method date_add($object, $interval)
 * @method date_sub($object, $interval)
 * @method date_timezone_get($object)
 * @method date_timezone_set($object, $timezone)
 * @method date_offset_get($object)
 * @method date_diff($object, $object2, $absolute)
 * @method date_time_set($object, $hour, $minute, $second, $microseconds)
 * @method date_date_set($object, $year, $month, $day)
 * @method date_isodate_set($object, $year, $week, $day)
 * @method date_timestamp_set($object, $unixtimestamp)
 * @method date_timestamp_get($object)
 * @method timezone_open($timezone)
 * @method timezone_name_get($object)
 * @method timezone_name_from_abbr($abbr, $gmtoffset, $isdst)
 * @method timezone_offset_get($object, $datetime)
 * @method timezone_transitions_get($object, $timestamp_begin, $timestamp_end)
 * @method timezone_location_get($object)
 * @method timezone_identifiers_list($what, $country)
 * @method timezone_abbreviations_list()
 * @method timezone_version_get()
 * @method date_interval_create_from_date_string($time)
 * @method date_interval_format($object, $format)
 * @method date_default_timezone_set($timezone_identifier)
 * @method date_default_timezone_get()
 * @method date_sunrise($time, $format, $latitude, $longitude, $zenith, $gmt_offset)
 * @method date_sunset($time, $format, $latitude, $longitude, $zenith, $gmt_offset)
 * @method date_sun_info($time, $latitude, $longitude)
 * @method libxml_set_streams_context($context)
 * @method libxml_use_internal_errors($use_errors)
 * @method libxml_get_last_error()
 * @method libxml_clear_errors()
 * @method libxml_get_errors()
 * @method libxml_disable_entity_loader($disable)
 * @method libxml_set_external_entity_loader($resolver_function)
 * @method openssl_get_cert_locations()
 * @method openssl_spki_new($privkey, $challenge, $algo)
 * @method openssl_spki_verify($spki)
 * @method openssl_spki_export($spki)
 * @method openssl_spki_export_challenge($spki)
 * @method openssl_pkey_free($key)
 * @method openssl_pkey_new($configargs)
 * @method openssl_pkey_export($key, $out, $passphrase, $config_args)
 * @method openssl_pkey_export_to_file($key, $outfilename, $passphrase, $config_args)
 * @method openssl_pkey_get_private($key, $passphrase)
 * @method openssl_pkey_get_public($cert)
 * @method openssl_pkey_get_details($key)
 * @method openssl_free_key($key)
 * @method openssl_get_privatekey($key, $passphrase)
 * @method openssl_get_publickey($cert)
 * @method openssl_x509_read($cert)
 * @method openssl_x509_free($x509)
 * @method openssl_x509_parse($x509, $shortname)
 * @method openssl_x509_checkpurpose($x509cert, $purpose, $cainfo, $untrustedfile)
 * @method openssl_x509_check_private_key($cert, $key)
 * @method openssl_x509_export($x509, $out, $notext)
 * @method openssl_x509_fingerprint($x509, $method, $raw_output)
 * @method openssl_x509_export_to_file($x509, $outfilename, $notext)
 * @method openssl_pkcs12_export($x509, $out, $priv_key, $pass, $args)
 * @method openssl_pkcs12_export_to_file($x509, $filename, $priv_key, $pass, $args)
 * @method openssl_pkcs12_read($PKCS12, $certs, $pass)
 * @method openssl_csr_new($dn, $privkey, $configargs, $extraattribs)
 * @method openssl_csr_export($csr, $out, $notext)
 * @method openssl_csr_export_to_file($csr, $outfilename, $notext)
 * @method openssl_csr_sign($csr, $x509, $priv_key, $days, $config_args, $serial)
 * @method openssl_csr_get_subject($csr)
 * @method openssl_csr_get_public_key($csr)
 * @method openssl_digest($data, $method, $raw_output)
 * @method openssl_encrypt($data, $method, $password, $options, $iv, $tag, $aad, $tag_length)
 * @method openssl_decrypt($data, $method, $password, $options, $iv, $tag, $aad)
 * @method openssl_cipher_iv_length($method)
 * @method openssl_sign($data, $signature, $key, $method)
 * @method openssl_verify($data, $signature, $key, $method)
 * @method openssl_seal($data, $sealdata, $ekeys, $pubkeys, $method, $iv)
 * @method openssl_open($data, $opendata, $ekey, $privkey, $iv)
 * @method openssl_pbkdf2($password, $salt, $key_length, $iterations, $digest_algorithm)
 * @method openssl_pkcs7_verify($filename, $flags, $signerscerts, $cainfo, $extracerts, $content)
 * @method openssl_pkcs7_decrypt($infilename, $outfilename, $recipcert, $recipkey)
 * @method openssl_pkcs7_sign($infile, $outfile, $signcert, $signkey, $headers, $flags, $extracertsfilename)
 * @method openssl_pkcs7_encrypt($infile, $outfile, $recipcerts, $headers, $flags, $cipher)
 * @method openssl_private_encrypt($data, $crypted, $key, $padding)
 * @method openssl_private_decrypt($data, $crypted, $key, $padding)
 * @method openssl_public_encrypt($data, $crypted, $key, $padding)
 * @method openssl_public_decrypt($data, $crypted, $key, $padding)
 * @method openssl_get_md_methods($aliases)
 * @method openssl_get_cipher_methods($aliases)
 * @method openssl_get_curve_names()
 * @method openssl_dh_compute_key($pub_key, $dh_key)
 * @method openssl_random_pseudo_bytes($length, $result_is_strong)
 * @method openssl_error_string()
 * @method preg_match($pattern, $subject, $subpatterns, $flags, $offset)
 * @method preg_match_all($pattern, $subject, $subpatterns, $flags, $offset)
 * @method preg_replace($regex, $replace, $subject, $limit, $count)
 * @method preg_replace_callback($regex, $callback, $subject, $limit, $count)
 * @method preg_replace_callback_array($pattern, $subject, $limit, $count)
 * @method preg_filter($regex, $replace, $subject, $limit, $count)
 * @method preg_split($pattern, $subject, $limit, $flags)
 * @method preg_quote($str, $delim_char)
 * @method preg_grep($regex, $input, $flags)
 * @method preg_last_error()
 * @method readgzfile($filename, $use_include_path)
 * @method gzrewind($fp)
 * @method gzclose($fp)
 * @method gzeof($fp)
 * @method gzgetc($fp)
 * @method gzgets($fp, $length)
 * @method gzgetss($fp, $length, $allowable_tags)
 * @method gzread($fp, $length)
 * @method gzopen($filename, $mode, $use_include_path)
 * @method gzpassthru($fp)
 * @method gzseek($fp, $offset, $whence)
 * @method gztell($fp)
 * @method gzwrite($fp, $str, $length)
 * @method gzputs($fp, $str, $length)
 * @method gzfile($filename, $use_include_path)
 * @method gzcompress($data, $level, $encoding)
 * @method gzuncompress($data, $max_decoded_len)
 * @method gzdeflate($data, $level, $encoding)
 * @method gzinflate($data, $max_decoded_len)
 * @method gzencode($data, $level, $encoding)
 * @method gzdecode($data, $max_decoded_len)
 * @method zlib_encode($data, $encoding, $level)
 * @method zlib_decode($data, $max_decoded_len)
 * @method zlib_get_coding_type()
 * @method deflate_init($encoding, $level)
 * @method deflate_add($resource, $add, $flush_behavior)
 * @method inflate_init($encoding)
 * @method inflate_add($resource, $flush_behavior)
 * @method ob_gzhandler($data, $flags)
 * @method filter_input($type, $variable_name, $filter, $options)
 * @method filter_var($variable, $filter, $options)
 * @method filter_input_array($type, $definition, $add_empty)
 * @method filter_var_array($data, $definition, $add_empty)
 * @method filter_list()
 * @method filter_has_var($type, $variable_name)
 * @method filter_id($filtername)
 * @method hash($algo, $data, $raw_output)
 * @method hash_file($algo, $filename, $raw_output)
 * @method hash_hmac($algo, $data, $key, $raw_output)
 * @method hash_hmac_file($algo, $filename, $key, $raw_output)
 * @method hash_init($algo, $options, $key)
 * @method hash_update($context, $data)
 * @method hash_update_stream($context, $handle, $length)
 * @method hash_update_file($context, $filename, $context)
 * @method hash_final($context, $raw_output)
 * @method hash_copy($context)
 * @method hash_algos()
 * @method hash_pbkdf2($algo, $password, $salt, $iterations, $length, $raw_output)
 * @method hash_equals($known_string, $user_string)
 * @method hash_hkdf($ikm, $algo, $length, $string, $salt)
 * @method mhash_keygen_s2k($hash, $input_password, $salt, $bytes)
 * @method mhash_get_block_size($hash)
 * @method mhash_get_hash_name($hash)
 * @method mhash_count()
 * @method mhash($hash, $data, $key)
 * @method pcntl_fork()
 * @method pcntl_waitpid($pid, $status, $options, $rusage)
 * @method pcntl_wait($status, $options, $rusage)
 * @method pcntl_signal($signo, $handler, $restart_syscalls)
 * @method pcntl_signal_get_handler($signo)
 * @method pcntl_signal_dispatch()
 * @method pcntl_wifexited($status)
 * @method pcntl_wifstopped($status)
 * @method pcntl_wifsignaled($status)
 * @method pcntl_wexitstatus($status)
 * @method pcntl_wtermsig($status)
 * @method pcntl_wstopsig($status)
 * @method pcntl_exec($path, $args, $envs)
 * @method pcntl_alarm($seconds)
 * @method pcntl_get_last_error()
 * @method pcntl_errno()
 * @method pcntl_strerror($errno)
 * @method pcntl_getpriority($pid, $process_identifier)
 * @method pcntl_setpriority($priority, $pid, $process_identifier)
 * @method pcntl_sigprocmask($how, $set, $oldset)
 * @method pcntl_sigwaitinfo($set, $info)
 * @method pcntl_sigtimedwait($set, $info, $seconds, $nanoseconds)
 * @method pcntl_wifcontinued($status)
 * @method pcntl_async_signals($on)
 * @method session_name($name)
 * @method session_module_name($module)
 * @method session_save_path($path)
 * @method session_id($id)
 * @method session_create_id($prefix)
 * @method session_regenerate_id($delete_old_session)
 * @method session_decode($data)
 * @method session_encode()
 * @method session_start($options)
 * @method session_destroy()
 * @method session_unset()
 * @method session_gc()
 * @method session_set_save_handler($open, $close, $read, $write, $destroy, $gc, $create_sid, $validate_sid, $update_timestamp)
 * @method session_cache_limiter($cache_limiter)
 * @method session_cache_expire($new_cache_expire)
 * @method session_set_cookie_params($lifetime, $path, $domain, $secure, $httponly)
 * @method session_get_cookie_params()
 * @method session_write_close()
 * @method session_abort()
 * @method session_reset()
 * @method session_status()
 * @method session_register_shutdown()
 * @method session_commit()
 * @method spl_classes()
 * @method spl_autoload($class_name, $file_extensions)
 * @method spl_autoload_extensions($file_extensions)
 * @method spl_autoload_register($autoload_function, $throw, $prepend)
 * @method spl_autoload_unregister($autoload_function)
 * @method spl_autoload_functions()
 * @method spl_autoload_call($class_name)
 * @method class_parents($instance, $autoload)
 * @method class_implements($what, $autoload)
 * @method class_uses($what, $autoload)
 * @method spl_object_hash($obj)
 * @method iterator_to_array($iterator, $use_keys)
 * @method iterator_count($iterator)
 * @method iterator_apply($iterator, $function, $args)
 * @method constant($const_name)
 * @method bin2hex($data)
 * @method hex2bin($data)
 * @method sleep($seconds)
 * @method usleep($micro_seconds)
 * @method time_nanosleep($seconds, $nanoseconds)
 * @method time_sleep_until($timestamp)
 * @method strptime($timestamp, $format)
 * @method flush()
 * @method wordwrap($str, $width, $break, $cut)
 * @method htmlspecialchars($string, $quote_style, $encoding, $double_encode)
 * @method htmlentities($string, $quote_style, $encoding, $double_encode)
 * @method html_entity_decode($string, $quote_style, $encoding)
 * @method htmlspecialchars_decode($string, $quote_style)
 * @method get_html_translation_table($table, $quote_style, $encoding)
 * @method sha1($str, $raw_output)
 * @method sha1_file($filename, $raw_output)
 * @method md5($str, $raw_output)
 * @method md5_file($filename, $raw_output)
 * @method crc32($str)
 * @method iptcparse($iptcdata)
 * @method iptcembed($iptcdata, $jpeg_file_name, $spool)
 * @method getimagesize($imagefile, $info)
 * @method getimagesizefromstring($imagefile, $info)
 * @method image_type_to_mime_type($imagetype)
 * @method image_type_to_extension($imagetype, $include_dot)
 * @method phpinfo($what)
 * @method phpversion($extension)
 * @method phpcredits($flag)
 * @method php_sapi_name()
 * @method php_uname($mode)
 * @method php_ini_scanned_files()
 * @method php_ini_loaded_file()
 * @method strnatcmp($s1, $s2)
 * @method strnatcasecmp($s1, $s2)
 * @method substr_count($haystack, $needle, $offset, $length)
 * @method strspn($str, $mask, $start, $len)
 * @method strcspn($str, $mask, $start, $len)
 * @method strtok($str, $token)
 * @method strtoupper($str)
 * @method strtolower($str)
 * @method strpos($haystack, $needle, $offset)
 * @method stripos($haystack, $needle, $offset)
 * @method strrpos($haystack, $needle, $offset)
 * @method strripos($haystack, $needle, $offset)
 * @method strrev($str)
 * @method hebrev($str, $max_chars_per_line)
 * @method hebrevc($str, $max_chars_per_line)
 * @method nl2br($str, $is_xhtml)
 * @method basename($path, $suffix)
 * @method dirname($path, $levels)
 * @method pathinfo($path, $options)
 * @method stripslashes($str)
 * @method stripcslashes($str)
 * @method strstr($haystack, $needle, $part)
 * @method stristr($haystack, $needle, $part)
 * @method strrchr($haystack, $needle)
 * @method str_shuffle($str)
 * @method str_word_count($str, $format, $charlist)
 * @method str_split($str, $split_length)
 * @method strpbrk($haystack, $char_list)
 * @method substr_compare($main_str, $str, $offset, $length, $case_sensitivity)
 * @method strcoll($str1, $str2)
 * @method money_format($format, $value)
 * @method substr($str, $start, $length)
 * @method substr_replace($str, $replace, $start, $length)
 * @method quotemeta($str)
 * @method ucfirst($str)
 * @method lcfirst($str)
 * @method ucwords($str, $delimiters)
 * @method strtr($str, $from, $to)
 * @method addslashes($str)
 * @method addcslashes($str, $charlist)
 * @method rtrim($str, $character_mask)
 * @method str_replace($search, $replace, $subject, $replace_count)
 * @method str_ireplace($search, $replace, $subject, $replace_count)
 * @method str_repeat($input, $mult)
 * @method count_chars($input, $mode)
 * @method chunk_split($str, $chunklen, $ending)
 * @method trim($str, $character_mask)
 * @method ltrim($str, $character_mask)
 * @method strip_tags($str, $allowable_tags)
 * @method similar_text($str1, $str2, $percent)
 * @method explode($separator, $str, $limit)
 * @method implode($glue, $pieces)
 * @method join($glue, $pieces)
 * @method setlocale($category, $locales)
 * @method localeconv()
 * @method nl_langinfo($item)
 * @method soundex($str)
 * @method levenshtein($str1, $str2, $cost_ins, $cost_rep, $cost_del)
 * @method chr($codepoint)
 * @method ord($character)
 * @method parse_str($encoded_string, $result)
 * @method str_getcsv($string, $delimiter, $enclosure, $escape)
 * @method str_pad($input, $pad_length, $pad_string, $pad_type)
 * @method chop($str, $character_mask)
 * @method strchr($haystack, $needle, $part)
 * @method sprintf($format, $args)
 * @method printf($format, $args)
 * @method vprintf($format, $args)
 * @method vsprintf($format, $args)
 * @method fprintf($stream, $format, $args)
 * @method vfprintf($stream, $format, $args)
 * @method sscanf($str, $format, $vars)
 * @method fscanf($stream, $format, $vars)
 * @method parse_url($url, $component)
 * @method urlencode($str)
 * @method urldecode($str)
 * @method rawurlencode($str)
 * @method rawurldecode($str)
 * @method http_build_query($formdata, $prefix, $arg_separator, $enc_type)
 * @method readlink($filename)
 * @method linkinfo($filename)
 * @method symlink($target, $link)
 * @method link($target, $link)
 * @method unlink($filename, $context)
 * @method exec($command, $output, $return_value)
 * @method system($command, $return_value)
 * @method escapeshellcmd($command)
 * @method escapeshellarg($arg)
 * @method passthru($command, $return_value)
 * @method shell_exec($cmd)
 * @method proc_open($command, $descriptorspec, $pipes, $cwd, $env, $other_options)
 * @method proc_close($process)
 * @method proc_terminate($process, $signal)
 * @method proc_get_status($process)
 * @method proc_nice($priority)
 * @method rand($min, $max)
 * @method srand($seed, $mode)
 * @method getrandmax()
 * @method mt_rand($min, $max)
 * @method mt_srand($seed, $mode)
 * @method mt_getrandmax()
 * @method random_bytes($length)
 * @method random_int($min, $max)
 * @method getservbyname($service, $protocol)
 * @method getservbyport($port, $protocol)
 * @method getprotobyname($name)
 * @method getprotobynumber($proto)
 * @method getmyuid()
 * @method getmygid()
 * @method getmypid()
 * @method getmyinode()
 * @method getlastmod()
 * @method base64_decode($str, $strict)
 * @method base64_encode($str)
 * @method password_hash($password, $algo, $options)
 * @method password_get_info($hash)
 * @method password_needs_rehash($hash, $algo, $options)
 * @method password_verify($password, $hash)
 * @method convert_uuencode($data)
 * @method convert_uudecode($data)
 * @method abs($number)
 * @method ceil($number)
 * @method floor($number)
 * @method round($number, $precision, $mode)
 * @method sin($number)
 * @method cos($number)
 * @method tan($number)
 * @method asin($number)
 * @method acos($number)
 * @method atan($number)
 * @method atanh($number)
 * @method atan2($y, $x)
 * @method sinh($number)
 * @method cosh($number)
 * @method tanh($number)
 * @method asinh($number)
 * @method acosh($number)
 * @method expm1($number)
 * @method log1p($number)
 * @method pi()
 * @method is_finite($val)
 * @method is_nan($val)
 * @method is_infinite($val)
 * @method pow($base, $exponent)
 * @method exp($number)
 * @method log($number, $base)
 * @method log10($number)
 * @method sqrt($number)
 * @method hypot($num1, $num2)
 * @method deg2rad($number)
 * @method rad2deg($number)
 * @method bindec($binary_number)
 * @method hexdec($hexadecimal_number)
 * @method octdec($octal_number)
 * @method decbin($decimal_number)
 * @method decoct($decimal_number)
 * @method dechex($decimal_number)
 * @method base_convert($number, $frombase, $tobase)
 * @method number_format($number, $num_decimal_places, $dec_separator, $thousands_separator)
 * @method fmod($x, $y)
 * @method intdiv($dividend, $divisor)
 * @method inet_ntop($in_addr)
 * @method inet_pton($ip_address)
 * @method ip2long($ip_address)
 * @method long2ip($proper_address)
 * @method getenv($varname, $local_only)
 * @method putenv($setting)
 * @method getopt($options, $opts, $optind)
 * @method sys_getloadavg()
 * @method microtime($get_as_float)
 * @method gettimeofday($get_as_float)
 * @method getrusage($who)
 * @method uniqid($prefix, $more_entropy)
 * @method quoted_printable_decode($str)
 * @method quoted_printable_encode($str)
 * @method convert_cyr_string($str, $from, $to)
 * @method get_current_user()
 * @method set_time_limit($seconds)
 * @method header_register_callback($callback)
 * @method get_cfg_var($option_name)
 * @method get_magic_quotes_gpc()
 * @method get_magic_quotes_runtime()
 * @method error_log($message, $message_type, $destination, $extra_headers)
 * @method error_get_last()
 * @method error_clear_last()
 * @method call_user_func($function_name, $parameters)
 * @method call_user_func_array($function_name, $parameters)
 * @method forward_static_call($function_name, $parameters)
 * @method forward_static_call_array($function_name, $parameters)
 * @method serialize($var)
 * @method unserialize($variable_representation, $allowed_classes)
 * @method var_dump($vars)
 * @method var_export($var, $return)
 * @method debug_zval_dump($vars)
 * @method print_r($var, $return)
 * @method memory_get_usage($real_usage)
 * @method memory_get_peak_usage($real_usage)
 * @method register_shutdown_function($function_name, $parameters)
 * @method register_tick_function($function_name, $parameters)
 * @method unregister_tick_function($function_name)
 * @method highlight_file($file_name, $return)
 * @method show_source($file_name, $return)
 * @method highlight_string($string, $return)
 * @method php_strip_whitespace($file_name)
 * @method ini_get($varname)
 * @method ini_get_all($extension, $details)
 * @method ini_set($varname, $newvalue)
 * @method ini_alter($varname, $newvalue)
 * @method ini_restore($varname)
 * @method get_include_path()
 * @method set_include_path($new_include_path)
 * @method restore_include_path()
 * @method setcookie($name, $value, $expires, $path, $domain, $secure, $httponly)
 * @method setrawcookie($name, $value, $expires, $path, $domain, $secure, $httponly)
 * @method header($header, $replace, $http_response_code)
 * @method header_remove($name)
 * @method headers_sent($file, $line)
 * @method headers_list()
 * @method http_response_code($response_code)
 * @method connection_aborted()
 * @method connection_status()
 * @method ignore_user_abort($value)
 * @method parse_ini_file($filename, $process_sections, $scanner_mode)
 * @method parse_ini_string($ini_string, $process_sections, $scanner_mode)
 * @method is_uploaded_file($path)
 * @method move_uploaded_file($path, $new_path)
 * @method gethostbyaddr($ip_address)
 * @method gethostbyname($hostname)
 * @method gethostbynamel($hostname)
 * @method gethostname()
 * @method dns_check_record($host, $type)
 * @method checkdnsrr($host, $type)
 * @method dns_get_mx($hostname, $mxhosts, $weight)
 * @method getmxrr($hostname, $mxhosts, $weight)
 * @method dns_get_record($hostname, $type, $authns, $addtl, $raw)
 * @method intval($var, $base)
 * @method floatval($var)
 * @method doubleval($var)
 * @method strval($var)
 * @method boolval($var)
 * @method gettype($var)
 * @method settype($var, $type)
 * @method is_null($var)
 * @method is_resource($var)
 * @method is_bool($var)
 * @method is_int($var)
 * @method is_float($var)
 * @method is_integer($var)
 * @method is_long($var)
 * @method is_double($var)
 * @method is_real($var)
 * @method is_numeric($value)
 * @method is_string($var)
 * @method is_array($var)
 * @method is_object($var)
 * @method is_scalar($value)
 * @method is_callable($var, $syntax_only, $callable_name)
 * @method is_iterable($var)
 * @method pclose($fp)
 * @method popen($command, $mode)
 * @method readfile($filename, $flags, $context)
 * @method rewind($fp)
 * @method rmdir($dirname, $context)
 * @method umask($mask)
 * @method fclose($fp)
 * @method feof($fp)
 * @method fgetc($fp)
 * @method fgets($fp, $length)
 * @method fgetss($fp, $length, $allowable_tags)
 * @method fread($fp, $length)
 * @method fopen($filename, $mode, $use_include_path, $context)
 * @method fpassthru($fp)
 * @method ftruncate($fp, $size)
 * @method fstat($fp)
 * @method fseek($fp, $offset, $whence)
 * @method ftell($fp)
 * @method fflush($fp)
 * @method fwrite($fp, $str, $length)
 * @method fputs($fp, $str, $length)
 * @method mkdir($pathname, $mode, $recursive, $context)
 * @method rename($old_name, $new_name, $context)
 * @method copy($source_file, $destination_file, $context)
 * @method tempnam($dir, $prefix)
 * @method tmpfile()
 * @method file($filename, $flags, $context)
 * @method file_get_contents($filename, $flags, $context, $offset, $maxlen)
 * @method file_put_contents($filename, $data, $flags, $context)
 * @method stream_select($read_streams, $write_streams, $except_streams, $tv_sec, $tv_usec)
 * @method stream_context_create($options, $params)
 * @method stream_context_set_params($stream_or_context, $options)
 * @method stream_context_get_params($stream_or_context)
 * @method stream_context_set_option($stream_or_context, $wrappername, $optionname, $value)
 * @method stream_context_get_options($stream_or_context)
 * @method stream_context_get_default($options)
 * @method stream_context_set_default($options)
 * @method stream_filter_prepend($stream, $filtername, $read_write, $filterparams)
 * @method stream_filter_append($stream, $filtername, $read_write, $filterparams)
 * @method stream_filter_remove($stream_filter)
 * @method stream_socket_client($remoteaddress, $errcode, $errstring, $timeout, $flags, $context)
 * @method stream_socket_server($localaddress, $errcode, $errstring, $flags, $context)
 * @method stream_socket_accept($serverstream, $timeout, $peername)
 * @method stream_socket_get_name($stream, $want_peer)
 * @method stream_socket_recvfrom($stream, $amount, $flags, $remote_addr)
 * @method stream_socket_sendto($stream, $data, $flags, $target_addr)
 * @method stream_socket_enable_crypto($stream, $enable, $cryptokind, $sessionstream)
 * @method stream_socket_shutdown($stream, $how)
 * @method stream_socket_pair($domain, $type, $protocol)
 * @method stream_copy_to_stream($source, $dest, $maxlen, $pos)
 * @method stream_get_contents($source, $maxlen, $offset)
 * @method stream_supports_lock($stream)
 * @method fgetcsv($fp, $length, $delimiter, $enclosure, $escape)
 * @method fputcsv($fp, $fields, $delimiter, $enclosure, $escape_char)
 * @method flock($fp, $operation, $wouldblock)
 * @method get_meta_tags($filename, $use_include_path)
 * @method stream_set_read_buffer($fp, $buffer)
 * @method stream_set_write_buffer($fp, $buffer)
 * @method set_file_buffer($fp, $buffer)
 * @method stream_set_chunk_size($fp, $chunk_size)
 * @method stream_set_blocking($socket, $mode)
 * @method socket_set_blocking($socket, $mode)
 * @method stream_get_meta_data($fp)
 * @method stream_get_line($stream, $maxlen, $ending)
 * @method stream_wrapper_register($protocol, $classname, $flags)
 * @method stream_register_wrapper($protocol, $classname, $flags)
 * @method stream_wrapper_unregister($protocol)
 * @method stream_wrapper_restore($protocol)
 * @method stream_get_wrappers()
 * @method stream_get_transports()
 * @method stream_resolve_include_path($filename)
 * @method stream_is_local($stream)
 * @method get_headers($url, $format, $context)
 * @method stream_set_timeout($stream, $seconds, $microseconds)
 * @method socket_set_timeout($stream, $seconds, $microseconds)
 * @method socket_get_status($fp)
 * @method realpath($path)
 * @method fnmatch($pattern, $filename, $flags)
 * @method fsockopen($hostname, $port, $errno, $errstr, $timeout)
 * @method pfsockopen($hostname, $port, $errno, $errstr, $timeout)
 * @method pack($format, $args)
 * @method unpack($format, $input, $offset)
 * @method get_browser($browser_name, $return_array)
 * @method crypt($str, $salt)
 * @method opendir($path, $context)
 * @method closedir($dir_handle)
 * @method chdir($directory)
 * @method chroot($directory)
 * @method getcwd()
 * @method rewinddir($dir_handle)
 * @method readdir($dir_handle)
 * @method dir($directory, $context)
 * @method scandir($dir, $sorting_order, $context)
 * @method glob($pattern, $flags)
 * @method fileatime($filename)
 * @method filectime($filename)
 * @method filegroup($filename)
 * @method fileinode($filename)
 * @method filemtime($filename)
 * @method fileowner($filename)
 * @method fileperms($filename)
 * @method filesize($filename)
 * @method filetype($filename)
 * @method file_exists($filename)
 * @method is_writable($filename)
 * @method is_writeable($filename)
 * @method is_readable($filename)
 * @method is_executable($filename)
 * @method is_file($filename)
 * @method is_dir($filename)
 * @method is_link($filename)
 * @method stat($filename)
 * @method lstat($filename)
 * @method chown($filename, $user)
 * @method chgrp($filename, $group)
 * @method lchown($filename, $user)
 * @method lchgrp($filename, $group)
 * @method chmod($filename, $mode)
 * @method touch($filename, $time, $atime)
 * @method clearstatcache($clear_realpath_cache, $filename)
 * @method disk_total_space($path)
 * @method disk_free_space($path)
 * @method diskfreespace($path)
 * @method realpath_cache_size()
 * @method realpath_cache_get()
 * @method mail($to, $subject, $message, $additional_headers, $additional_parameters)
 * @method ezmlm_hash($addr)
 * @method openlog($ident, $option, $facility)
 * @method syslog($priority, $message)
 * @method closelog()
 * @method lcg_value()
 * @method metaphone($text, $phones)
 * @method ob_start($user_function, $chunk_size, $flags)
 * @method ob_flush()
 * @method ob_clean()
 * @method ob_end_flush()
 * @method ob_end_clean()
 * @method ob_get_flush()
 * @method ob_get_clean()
 * @method ob_get_length()
 * @method ob_get_level()
 * @method ob_get_status($full_status)
 * @method ob_get_contents()
 * @method ob_implicit_flush($flag)
 * @method ob_list_handlers()
 * @method ksort($arg, $sort_flags)
 * @method krsort($arg, $sort_flags)
 * @method natsort($arg)
 * @method natcasesort($arg)
 * @method asort($arg, $sort_flags)
 * @method arsort($arg, $sort_flags)
 * @method sort($arg, $sort_flags)
 * @method rsort($arg, $sort_flags)
 * @method usort($arg, $cmp_function)
 * @method uasort($arg, $cmp_function)
 * @method uksort($arg, $cmp_function)
 * @method shuffle($arg)
 * @method array_walk($input, $funcname, $userdata)
 * @method array_walk_recursive($input, $funcname, $userdata)
 * @method count($var, $mode)
 * @method end($arg)
 * @method prev($arg)
 * @method next($arg)
 * @method reset($arg)
 * @method current($arg)
 * @method key($arg)
 * @method min($args)
 * @method max($args)
 * @method in_array($needle, $haystack, $strict)
 * @method array_search($needle, $haystack, $strict)
 * @method extract($arg, $extract_type, $prefix)
 * @method compact($var_names)
 * @method array_fill($start_key, $num, $val)
 * @method array_fill_keys($keys, $val)
 * @method range($low, $high, $step)
 * @method array_multisort($arr1, $sort_order, $sort_flags, $arr2)
 * @method array_push($stack, $vars)
 * @method array_pop($stack)
 * @method array_shift($stack)
 * @method array_unshift($stack, $vars)
 * @method array_splice($arg, $offset, $length, $replacement)
 * @method array_slice($arg, $offset, $length, $preserve_keys)
 * @method array_merge($arr1, $arrays)
 * @method array_merge_recursive($arr1, $arrays)
 * @method array_replace($arr1, $arrays)
 * @method array_replace_recursive($arr1, $arrays)
 * @method array_keys($arg, $search_value, $strict)
 * @method array_values($arg)
 * @method array_count_values($arg)
 * @method array_column($arg, $column_key, $index_key)
 * @method array_reverse($input, $preserve_keys)
 * @method array_reduce($arg, $callback, $initial)
 * @method array_pad($arg, $pad_size, $pad_value)
 * @method array_flip($arg)
 * @method array_change_key_case($input, $case)
 * @method array_rand($arg, $num_req)
 * @method array_unique($arg, $flags)
 * @method array_intersect($arr1, $arrays)
 * @method array_intersect_key($arr1, $arrays)
 * @method array_intersect_ukey($arr1, $arr2, $callback_key_compare_func)
 * @method array_uintersect($arr1, $arr2, $callback_data_compare_func)
 * @method array_intersect_assoc($arr1, $arrays)
 * @method array_uintersect_assoc($arr1, $arr2, $callback_data_compare_func)
 * @method array_intersect_uassoc($arr1, $arr2, $callback_key_compare_func)
 * @method array_uintersect_uassoc($arr1, $arr2, $callback_data_compare_func, $callback_key_compare_func)
 * @method array_diff($arr1, $arrays)
 * @method array_diff_key($arr1, $arrays)
 * @method array_diff_ukey($arr1, $arr2, $callback_key_comp_func)
 * @method array_udiff($arr1, $arr2, $callback_data_comp_func)
 * @method array_diff_assoc($arr1, $arrays)
 * @method array_udiff_assoc($arr1, $arr2, $callback_key_comp_func)
 * @method array_diff_uassoc($arr1, $arr2, $callback_data_comp_func)
 * @method array_udiff_uassoc($arr1, $arr2, $callback_data_comp_func, $callback_key_comp_func)
 * @method array_sum($arg)
 * @method array_product($arg)
 * @method array_filter($arg, $callback, $use_keys)
 * @method array_map($callback, $arrays)
 * @method array_chunk($arg, $size, $preserve_keys)
 * @method array_combine($keys, $values)
 * @method array_key_exists($key, $search)
 * @method pos($arg)
 * @method sizeof($var, $mode)
 * @method key_exists($key, $search)
 * @method assert($assertion, $description)
 * @method assert_options($what, $value)
 * @method version_compare($ver1, $ver2, $oper)
 * @method ftok($pathname, $proj)
 * @method str_rot13($str)
 * @method stream_get_filters()
 * @method stream_filter_register($filtername, $classname)
 * @method stream_bucket_make_writeable($brigade)
 * @method stream_bucket_prepend($brigade, $bucket)
 * @method stream_bucket_append($brigade, $bucket)
 * @method stream_bucket_new($stream, $buffer)
 * @method output_add_rewrite_var($name, $value)
 * @method output_reset_rewrite_vars()
 * @method sys_get_temp_dir()
 * @method xhprof_enable($flags, $options)
 * @method xhprof_disable()
 * @method xhprof_sample_enable()
 * @method xhprof_sample_disable()
 * @method pdo_drivers()
 * @method xml_parser_create($encoding)
 * @method xml_parser_create_ns($encoding, $sep)
 * @method xml_set_object($parser, $obj)
 * @method xml_set_element_handler($parser, $shdl, $ehdl)
 * @method xml_set_character_data_handler($parser, $hdl)
 * @method xml_set_processing_instruction_handler($parser, $hdl)
 * @method xml_set_default_handler($parser, $hdl)
 * @method xml_set_unparsed_entity_decl_handler($parser, $hdl)
 * @method xml_set_notation_decl_handler($parser, $hdl)
 * @method xml_set_external_entity_ref_handler($parser, $hdl)
 * @method xml_set_start_namespace_decl_handler($parser, $hdl)
 * @method xml_set_end_namespace_decl_handler($parser, $hdl)
 * @method xml_parse($parser, $data, $isfinal)
 * @method xml_parse_into_struct($parser, $data, $values, $index)
 * @method xml_get_error_code($parser)
 * @method xml_error_string($code)
 * @method xml_get_current_line_number($parser)
 * @method xml_get_current_column_number($parser)
 * @method xml_get_current_byte_index($parser)
 * @method xml_parser_free($parser)
 * @method xml_parser_set_option($parser, $option, $value)
 * @method xml_parser_get_option($parser, $option)
 * @method utf8_encode($data)
 * @method utf8_decode($data)
 * @method apcu_cache_info($limited)
 * @method apcu_clear_cache()
 * @method apcu_sma_info($limited)
 * @method apcu_key_info($key)
 * @method apcu_enabled()
 * @method apcu_store($key, $var, $ttl)
 * @method apcu_fetch($key, $success)
 * @method apcu_delete($keys)
 * @method apcu_add($key, $var, $ttl)
 * @method apcu_inc($key, $step, $success)
 * @method apcu_dec($key, $step, $success)
 * @method apcu_cas($key, $old, $new)
 * @method apcu_exists($keys)
 * @method apcu_entry($key, $generator, $ttl)
 * @method apc_cache_info($type, $limited)
 * @method apc_clear_cache($type)
 * @method apc_store($key, $var, $ttl)
 * @method apc_fetch($key, $success)
 * @method apc_enabled()
 * @method apc_delete($keys)
 * @method apc_add($key, $var, $ttl)
 * @method apc_sma_info($limited)
 * @method apc_inc($key, $step, $success)
 * @method apc_dec($key, $step, $success)
 * @method apc_cas($key, $old, $new)
 * @method apc_exists($keys)
 * @method jdtogregorian($juliandaycount)
 * @method gregoriantojd($month, $day, $year)
 * @method jdtojulian($juliandaycount)
 * @method juliantojd($month, $day, $year)
 * @method jdtojewish($juliandaycount, $hebrew, $fl)
 * @method jewishtojd($month, $day, $year)
 * @method jdtofrench($juliandaycount)
 * @method frenchtojd($month, $day, $year)
 * @method jddayofweek($juliandaycount, $mode)
 * @method jdmonthname($juliandaycount, $mode)
 * @method easter_date($year)
 * @method easter_days($year, $method)
 * @method unixtojd($timestamp)
 * @method jdtounix($jday)
 * @method cal_to_jd($calendar, $month, $day, $year)
 * @method cal_from_jd($jd, $calendar)
 * @method cal_days_in_month($calendar, $month, $year)
 * @method cal_info($calendar)
 * @method ctype_alnum($text)
 * @method ctype_alpha($text)
 * @method ctype_cntrl($text)
 * @method ctype_digit($text)
 * @method ctype_lower($text)
 * @method ctype_graph($text)
 * @method ctype_print($text)
 * @method ctype_punct($text)
 * @method ctype_space($text)
 * @method ctype_upper($text)
 * @method ctype_xdigit($text)
 * @method curl_init($url)
 * @method curl_copy_handle($ch)
 * @method curl_version($version)
 * @method curl_setopt($ch, $option, $value)
 * @method curl_setopt_array($ch, $options)
 * @method curl_exec($ch)
 * @method curl_getinfo($ch, $option)
 * @method curl_error($ch)
 * @method curl_errno($ch)
 * @method curl_close($ch)
 * @method curl_strerror($errornum)
 * @method curl_multi_strerror($errornum)
 * @method curl_share_strerror($errornum)
 * @method curl_reset($ch)
 * @method curl_escape($ch, $str)
 * @method curl_unescape($ch, $str)
 * @method curl_pause($ch, $bitmask)
 * @method curl_multi_init()
 * @method curl_multi_add_handle($mh, $ch)
 * @method curl_multi_remove_handle($mh, $ch)
 * @method curl_multi_select($mh, $timeout)
 * @method curl_multi_exec($mh, $still_running)
 * @method curl_multi_getcontent($ch)
 * @method curl_multi_info_read($mh, $msgs_in_queue)
 * @method curl_multi_close($mh)
 * @method curl_multi_errno($mh)
 * @method curl_multi_setopt($sh, $option, $value)
 * @method curl_share_init()
 * @method curl_share_close($sh)
 * @method curl_share_setopt($sh, $option, $value)
 * @method curl_share_errno($sh)
 * @method curl_file_create($filename, $mimetype, $postname)
 * @method dom_import_simplexml($node)
 * @method exif_read_data($filename, $sections_needed, $sub_arrays, $read_thumbnail)
 * @method read_exif_data($filename, $sections_needed, $sub_arrays, $read_thumbnail)
 * @method exif_tagname($index)
 * @method exif_thumbnail($filename, $width, $height, $imagetype)
 * @method exif_imagetype($imagefile)
 * @method finfo_open($options, $arg)
 * @method finfo_close($finfo)
 * @method finfo_set_flags($finfo, $options)
 * @method finfo_file($finfo, $filename, $options, $context)
 * @method finfo_buffer($finfo, $string, $options, $context)
 * @method mime_content_type($string)
 * @method ftp_connect($host, $port, $timeout)
 * @method ftp_ssl_connect($host, $port, $timeout)
 * @method ftp_login($ftp, $username, $password)
 * @method ftp_pwd($ftp)
 * @method ftp_cdup($ftp)
 * @method ftp_chdir($ftp, $directory)
 * @method ftp_exec($ftp, $command)
 * @method ftp_raw($ftp, $command)
 * @method ftp_mkdir($ftp, $directory)
 * @method ftp_rmdir($ftp, $directory)
 * @method ftp_chmod($ftp, $mode, $filename)
 * @method ftp_alloc($ftp, $size, $response)
 * @method ftp_nlist($ftp, $directory)
 * @method ftp_rawlist($ftp, $directory, $recursive)
 * @method ftp_systype($ftp)
 * @method ftp_pasv($ftp, $pasv)
 * @method ftp_get($ftp, $local_file, $remote_file, $mode, $resume_pos)
 * @method ftp_fget($ftp, $fp, $remote_file, $mode, $resumepos)
 * @method ftp_put($ftp, $remote_file, $local_file, $mode, $startpos)
 * @method ftp_fput($ftp, $remote_file, $fp, $mode, $startpos)
 * @method ftp_size($ftp, $filename)
 * @method ftp_mdtm($ftp, $filename)
 * @method ftp_rename($ftp, $src, $dest)
 * @method ftp_delete($ftp, $file)
 * @method ftp_site($ftp, $cmd)
 * @method ftp_close($ftp)
 * @method ftp_set_option($ftp, $option, $value)
 * @method ftp_get_option($ftp, $option)
 * @method ftp_nb_fget($ftp, $fp, $remote_file, $mode, $resumepos)
 * @method ftp_nb_get($ftp, $local_file, $remote_file, $mode, $resume_pos)
 * @method ftp_nb_continue($ftp)
 * @method ftp_nb_put($ftp, $remote_file, $local_file, $mode, $startpos)
 * @method ftp_nb_fput($ftp, $remote_file, $fp, $mode, $startpos)
 * @method ftp_quit($ftp)
 * @method textdomain($domain)
 * @method gettext($msgid)
 * @method _($msgid)
 * @method dgettext($domain_name, $msgid)
 * @method dcgettext($domain_name, $msgid, $category)
 * @method bindtextdomain($domain_name, $dir)
 * @method ngettext($msgid1, $msgid2, $count)
 * @method dngettext($domain, $msgid1, $msgid2, $count)
 * @method dcngettext($domain, $msgid1, $msgid2, $count, $category)
 * @method bind_textdomain_codeset($domain, $codeset)
 * @method iconv($in_charset, $out_charset, $str)
 * @method iconv_get_encoding($type)
 * @method iconv_set_encoding($type, $charset)
 * @method iconv_strlen($str, $charset)
 * @method iconv_substr($str, $offset, $length, $charset)
 * @method iconv_strpos($haystack, $needle, $offset, $charset)
 * @method iconv_strrpos($haystack, $needle, $charset)
 * @method iconv_mime_encode($field_name, $field_value, $preference)
 * @method iconv_mime_decode($encoded_string, $mode, $charset)
 * @method iconv_mime_decode_headers($headers, $mode, $charset)
 * @method igbinary_serialize($value)
 * @method igbinary_unserialize($str)
 * @method json_encode($value, $options, $depth)
 * @method json_decode($json, $assoc, $depth, $options)
 * @method json_last_error()
 * @method json_last_error_msg()
 * @method mb_convert_case($sourcestring, $mode, $encoding)
 * @method mb_strtoupper($sourcestring, $encoding)
 * @method mb_strtolower($sourcestring, $encoding)
 * @method mb_language($language)
 * @method mb_internal_encoding($encoding)
 * @method mb_http_input($type)
 * @method mb_http_output($encoding)
 * @method mb_detect_order($encoding)
 * @method mb_substitute_character($substchar)
 * @method mb_parse_str($encoded_string, $result)
 * @method mb_output_handler($contents, $status)
 * @method mb_preferred_mime_name($encoding)
 * @method mb_strlen($str, $encoding)
 * @method mb_strpos($haystack, $needle, $offset, $encoding)
 * @method mb_strrpos($haystack, $needle, $offset, $encoding)
 * @method mb_stripos($haystack, $needle, $offset, $encoding)
 * @method mb_strripos($haystack, $needle, $offset, $encoding)
 * @method mb_strstr($haystack, $needle, $part, $encoding)
 * @method mb_strrchr($haystack, $needle, $part, $encoding)
 * @method mb_stristr($haystack, $needle, $part, $encoding)
 * @method mb_strrichr($haystack, $needle, $part, $encoding)
 * @method mb_substr_count($haystack, $needle, $encoding)
 * @method mb_substr($str, $start, $length, $encoding)
 * @method mb_strcut($str, $start, $length, $encoding)
 * @method mb_strwidth($str, $encoding)
 * @method mb_strimwidth($str, $start, $width, $trimmarker, $encoding)
 * @method mb_convert_encoding($str, $to, $from)
 * @method mb_detect_encoding($str, $encoding_list, $strict)
 * @method mb_list_encodings()
 * @method mb_encoding_aliases($encoding)
 * @method mb_convert_kana($str, $option, $encoding)
 * @method mb_encode_mimeheader($str, $charset, $transfer, $linefeed, $indent)
 * @method mb_decode_mimeheader($string)
 * @method mb_convert_variables($to, $from, $vars)
 * @method mb_encode_numericentity($string, $convmap, $encoding, $is_hex)
 * @method mb_decode_numericentity($string, $convmap, $encoding)
 * @method mb_send_mail($to, $subject, $message, $additional_headers, $additional_parameters)
 * @method mb_get_info($type)
 * @method mb_check_encoding($var, $encoding)
 * @method mb_regex_encoding($encoding)
 * @method mb_regex_set_options($options)
 * @method mb_ereg($pattern, $string, $registers)
 * @method mb_eregi($pattern, $string, $registers)
 * @method mb_ereg_replace($pattern, $replacement, $string, $option)
 * @method mb_eregi_replace($pattern, $replacement, $string)
 * @method mb_ereg_replace_callback($pattern, $callback, $string, $option)
 * @method mb_split($pattern, $string, $limit)
 * @method mb_ereg_match($pattern, $string, $option)
 * @method mb_ereg_search($pattern, $option)
 * @method mb_ereg_search_pos($pattern, $option)
 * @method mb_ereg_search_regs($pattern, $option)
 * @method mb_ereg_search_init($string, $pattern, $option)
 * @method mb_ereg_search_getregs()
 * @method mb_ereg_search_getpos()
 * @method mb_ereg_search_setpos($position)
 * @method mbregex_encoding($encoding)
 * @method mbereg($pattern, $string, $registers)
 * @method mberegi($pattern, $string, $registers)
 * @method mbereg_replace($pattern, $replacement, $string, $option)
 * @method mberegi_replace($pattern, $replacement, $string)
 * @method mbsplit($pattern, $string, $limit)
 * @method mbereg_match($pattern, $string, $option)
 * @method mbereg_search($pattern, $option)
 * @method mbereg_search_pos($pattern, $option)
 * @method mbereg_search_regs($pattern, $option)
 * @method mbereg_search_init($string, $pattern, $option)
 * @method mbereg_search_getregs()
 * @method mbereg_search_getpos()
 * @method mbereg_search_setpos($position)
 * @method pg_connect($connection_string, $connect_type, $host, $port, $options, $tty, $database)
 * @method pg_pconnect($connection_string, $host, $port, $options, $tty, $database)
 * @method pg_connect_poll($connection)
 * @method pg_close($connection)
 * @method pg_connection_status($connection)
 * @method pg_connection_busy($connection)
 * @method pg_connection_reset($connection)
 * @method pg_host($connection)
 * @method pg_dbname($connection)
 * @method pg_port($connection)
 * @method pg_tty($connection)
 * @method pg_options($connection)
 * @method pg_version($connection)
 * @method pg_ping($connection)
 * @method pg_parameter_status($connection, $param_name)
 * @method pg_transaction_status($connection)
 * @method pg_query($connection, $query)
 * @method pg_query_params($connection, $query, $params)
 * @method pg_prepare($connection, $stmtname, $query)
 * @method pg_execute($connection, $stmtname, $params)
 * @method pg_send_query($connection, $query)
 * @method pg_send_query_params($connection, $query, $params)
 * @method pg_send_prepare($connection, $stmtname, $query)
 * @method pg_send_execute($connection, $stmtname, $params)
 * @method pg_cancel_query($connection)
 * @method pg_fetch_result($result, $row_number, $field_name)
 * @method pg_fetch_row($result, $row, $result_type)
 * @method pg_fetch_assoc($result, $row)
 * @method pg_fetch_array($result, $row, $result_type)
 * @method pg_fetch_object($result, $row, $class_name, $l, $ctor_params)
 * @method pg_fetch_all($result, $result_type)
 * @method pg_fetch_all_columns($result, $column_number)
 * @method pg_affected_rows($result)
 * @method pg_get_result($connection)
 * @method pg_result_seek($result, $offset)
 * @method pg_result_status($result, $result_type)
 * @method pg_free_result($result)
 * @method pg_last_oid($result)
 * @method pg_num_rows($result)
 * @method pg_num_fields($result)
 * @method pg_field_name($result, $field_number)
 * @method pg_field_num($result, $field_name)
 * @method pg_field_size($result, $field_number)
 * @method pg_field_type($result, $field_number)
 * @method pg_field_type_oid($result, $field_number)
 * @method pg_field_prtlen($result, $row, $field_name_or_number)
 * @method pg_field_is_null($result, $row, $field_name_or_number)
 * @method pg_field_table($result, $field_number, $oid_only)
 * @method pg_get_notify($connection, $e)
 * @method pg_socket($connection)
 * @method pg_consume_input($connection)
 * @method pg_flush($connection)
 * @method pg_get_pid($connection)
 * @method pg_result_error($result)
 * @method pg_result_error_field($result, $fieldcode)
 * @method pg_last_error($connection)
 * @method pg_last_notice($connection, $option)
 * @method pg_put_line($connection, $query)
 * @method pg_end_copy($connection)
 * @method pg_copy_to($connection, $table_name, $delimiter, $null_as)
 * @method pg_copy_from($connection, $table_name, $rows, $delimiter, $null_as)
 * @method pg_trace($filename, $mode, $connection)
 * @method pg_untrace($connection)
 * @method pg_lo_create($connection, $large_object_id)
 * @method pg_lo_unlink($connection, $large_object_oid)
 * @method pg_lo_open($connection, $large_object_oid, $mode)
 * @method pg_lo_close($large_object)
 * @method pg_lo_read($large_object, $len)
 * @method pg_lo_write($large_object, $buf, $len)
 * @method pg_lo_read_all($large_object)
 * @method pg_lo_import($connection, $filename, $large_object_oid)
 * @method pg_lo_export($connection, $objoid, $filename)
 * @method pg_lo_seek($large_object, $offset, $whence)
 * @method pg_lo_tell($large_object)
 * @method pg_lo_truncate($large_object, $size)
 * @method pg_escape_string($connection, $data)
 * @method pg_escape_bytea($connection, $data)
 * @method pg_unescape_bytea($data)
 * @method pg_escape_literal($connection, $data)
 * @method pg_escape_identifier($connection, $data)
 * @method pg_set_error_verbosity($connection, $verbosity)
 * @method pg_client_encoding($connection)
 * @method pg_set_client_encoding($connection, $encoding)
 * @method pg_meta_data($db, $table)
 * @method pg_convert($db, $table, $values, $options)
 * @method pg_insert($db, $table, $values, $options)
 * @method pg_update($db, $table, $fields, $ids, $options)
 * @method pg_delete($db, $table, $ids, $options)
 * @method pg_select($db, $table, $ids, $options, $result_type)
 * @method pg_exec($connection, $query)
 * @method pg_getlastoid($result)
 * @method pg_cmdtuples($result)
 * @method pg_errormessage($connection)
 * @method pg_numrows($result)
 * @method pg_numfields($result)
 * @method pg_fieldname($result, $field_number)
 * @method pg_fieldsize($result, $field_number)
 * @method pg_fieldtype($result, $field_number)
 * @method pg_fieldnum($result, $field_name)
 * @method pg_fieldprtlen($result, $row, $field_name_or_number)
 * @method pg_fieldisnull($result, $row, $field_name_or_number)
 * @method pg_freeresult($result)
 * @method pg_result($connection)
 * @method pg_loreadall($large_object)
 * @method pg_locreate($connection, $large_object_id)
 * @method pg_lounlink($connection, $large_object_oid)
 * @method pg_loopen($connection, $large_object_oid, $mode)
 * @method pg_loclose($large_object)
 * @method pg_loread($large_object, $len)
 * @method pg_lowrite($large_object, $buf, $len)
 * @method pg_loimport($connection, $filename, $large_object_oid)
 * @method pg_loexport($connection, $objoid, $filename)
 * @method pg_clientencoding($connection)
 * @method pg_setclientencoding($connection, $encoding)
 * @method posix_kill($pid, $sig)
 * @method posix_getpid()
 * @method posix_getppid()
 * @method posix_getuid()
 * @method posix_setuid($uid)
 * @method posix_geteuid()
 * @method posix_seteuid($uid)
 * @method posix_getgid()
 * @method posix_setgid($gid)
 * @method posix_getegid()
 * @method posix_setegid($gid)
 * @method posix_getgroups()
 * @method posix_getlogin()
 * @method posix_getpgrp()
 * @method posix_setsid()
 * @method posix_setpgid($pid, $pgid)
 * @method posix_getpgid($pid)
 * @method posix_getsid($pid)
 * @method posix_uname()
 * @method posix_times()
 * @method posix_ctermid()
 * @method posix_ttyname($fd)
 * @method posix_isatty($fd)
 * @method posix_getcwd()
 * @method posix_mkfifo($pathname, $mode)
 * @method posix_mknod($pathname, $mode, $major, $minor)
 * @method posix_access($file, $mode)
 * @method posix_getgrnam($name)
 * @method posix_getgrgid($gid)
 * @method posix_getpwnam($username)
 * @method posix_getpwuid($uid)
 * @method posix_getrlimit()
 * @method posix_setrlimit($resource, $softlimit, $hardlimit)
 * @method posix_get_last_error()
 * @method posix_errno()
 * @method posix_strerror($errno)
 * @method posix_initgroups($name, $base_group_id)
 * @method readline($prompt)
 * @method readline_info($varname, $newvalue)
 * @method readline_add_history($prompt)
 * @method readline_clear_history()
 * @method readline_read_history($filename)
 * @method readline_write_history($filename)
 * @method readline_completion_function($funcname)
 * @method readline_callback_handler_install($prompt, $callback)
 * @method readline_callback_read_char()
 * @method readline_callback_handler_remove()
 * @method readline_redisplay()
 * @method readline_on_new_line()
 * @method runkit_zval_inspect($value)
 * @method runkit_object_id($obj)
 * @method runkit_superglobals()
 * @method runkit_function_add($funcname, $arglist_or_closure, $code_or_doc_comment, $return_by_reference, $doc_comment, $return_type)
 * @method runkit_function_remove($funcname)
 * @method runkit_function_rename($funcname, $newname)
 * @method runkit_function_redefine($funcname, $arglist_or_closure, $code_or_doc_comment, $return_by_reference, $doc_comment, $return_type)
 * @method runkit_function_copy($funcname, $targetname)
 * @method runkit_method_add($classname, $methodname, $arglist_or_closure, $code_or_flags, $flags_or_doc_comment, $doc_comment, $return_type)
 * @method runkit_method_redefine($classname, $methodname, $arglist_or_closure, $code_or_flags, $flags_or_doc_comment, $doc_comment, $return_type)
 * @method runkit_method_remove($classname, $methodname)
 * @method runkit_method_rename($classname, $methodname, $newname)
 * @method runkit_method_copy($dClass, $dMethod, $sClass, $sMethod)
 * @method runkit_constant_redefine($constname, $value, $newVisibility)
 * @method runkit_constant_remove($constname)
 * @method runkit_constant_add($constname, $value, $newVisibility)
 * @method shmop_open($key, $flags, $mode, $size)
 * @method shmop_read($shmid, $start, $count)
 * @method shmop_close($shmid)
 * @method shmop_size($shmid)
 * @method shmop_write($shmid, $data, $offset)
 * @method shmop_delete($shmid)
 * @method simplexml_load_file($filename, $class_name, $options, $ns, $is_prefix)
 * @method simplexml_load_string($data, $class_name, $options, $ns, $is_prefix)
 * @method simplexml_import_dom($node, $class_name)
 * @method socket_select($read_fds, $write_fds, $except_fds, $tv_sec, $tv_usec)
 * @method socket_create($domain, $type, $protocol)
 * @method socket_create_listen($port, $backlog)
 * @method socket_create_pair($domain, $type, $protocol, $fd)
 * @method socket_accept($socket)
 * @method socket_set_nonblock($socket)
 * @method socket_set_block($socket)
 * @method socket_listen($socket, $backlog)
 * @method socket_close($socket)
 * @method socket_write($socket, $buf, $length)
 * @method socket_read($socket, $length, $type)
 * @method socket_getsockname($socket, $addr, $port)
 * @method socket_getpeername($socket, $addr, $port)
 * @method socket_connect($socket, $addr, $port)
 * @method socket_strerror($errno)
 * @method socket_bind($socket, $addr, $port)
 * @method socket_recv($socket, $buf, $len, $flags)
 * @method socket_send($socket, $buf, $len, $flags)
 * @method socket_recvfrom($socket, $buf, $len, $flags, $name, $port)
 * @method socket_sendto($socket, $buf, $len, $flags, $addr, $port)
 * @method socket_get_option($socket, $level, $optname)
 * @method socket_set_option($socket, $level, $optname, $optval)
 * @method socket_shutdown($socket, $how)
 * @method socket_last_error($socket)
 * @method socket_clear_error($socket)
 * @method socket_import_stream($stream)
 * @method socket_export_stream($socket)
 * @method socket_sendmsg($socket, $msghdr, $flags)
 * @method socket_recvmsg($socket, $msghdr, $flags)
 * @method socket_cmsg_space($level, $type)
 * @method socket_getopt($socket, $level, $optname)
 * @method socket_setopt($socket, $level, $optname, $optval)
 * @method msg_get_queue($key, $perms)
 * @method msg_send($queue, $msgtype, $message, $serialize, $blocking, $errorcode)
 * @method msg_receive($queue, $desiredmsgtype, $msgtype, $maxsize, $message, $unserialize, $flags, $errorcode)
 * @method msg_remove_queue($queue)
 * @method msg_stat_queue($queue)
 * @method msg_set_queue($queue, $data)
 * @method msg_queue_exists($key)
 * @method sem_get($key, $max_acquire, $perm, $auto_release)
 * @method sem_acquire($sem_identifier, $nowait)
 * @method sem_release($sem_identifier)
 * @method sem_remove($sem_identifier)
 * @method shm_attach($key, $memsize, $perm)
 * @method shm_remove($shm_identifier)
 * @method shm_detach($shm_identifier)
 * @method shm_put_var($shm_identifier, $variable_key, $variable)
 * @method shm_has_var($id, $variable_key)
 * @method shm_get_var($id, $variable_key)
 * @method shm_remove_var($id, $variable_key)
 * @method token_get_all($source, $flags)
 * @method token_name($token)
 * @method uuid_create($uuid_type)
 * @method uuid_is_valid($uuid)
 * @method uuid_compare($uuid1, $uuid2)
 * @method uuid_is_null($uuid)
 * @method uuid_type($uuid)
 * @method uuid_variant($uuid)
 * @method uuid_time($uuid)
 * @method uuid_mac($uuid)
 * @method uuid_parse($uuid)
 * @method uuid_unparse($uuid)
 * @method wddx_serialize_value($var, $comment)
 * @method wddx_serialize_vars($var_names)
 * @method wddx_packet_start($comment)
 * @method wddx_packet_end($packet_id)
 * @method wddx_add_vars($packet_id, $var_names)
 * @method wddx_deserialize($packet)
 * @method xmlwriter_open_uri($uri)
 * @method xmlwriter_open_memory()
 * @method xmlwriter_set_indent($xmlwriter, $indent)
 * @method xmlwriter_set_indent_string($xmlwriter, $indentString)
 * @method xmlwriter_start_comment($xmlwriter)
 * @method xmlwriter_end_comment($xmlwriter)
 * @method xmlwriter_start_attribute($xmlwriter, $name)
 * @method xmlwriter_end_attribute($xmlwriter)
 * @method xmlwriter_write_attribute($xmlwriter, $name, $value)
 * @method xmlwriter_start_attribute_ns($xmlwriter, $prefix, $name, $uri)
 * @method xmlwriter_write_attribute_ns($xmlwriter, $prefix, $name, $uri, $content)
 * @method xmlwriter_start_element($xmlwriter, $name)
 * @method xmlwriter_end_element($xmlwriter)
 * @method xmlwriter_full_end_element($xmlwriter)
 * @method xmlwriter_start_element_ns($xmlwriter, $prefix, $name, $uri)
 * @method xmlwriter_write_element($xmlwriter, $name, $content)
 * @method xmlwriter_write_element_ns($xmlwriter, $prefix, $name, $uri, $content)
 * @method xmlwriter_start_pi($xmlwriter, $target)
 * @method xmlwriter_end_pi($xmlwriter)
 * @method xmlwriter_write_pi($xmlwriter, $target, $content)
 * @method xmlwriter_start_cdata($xmlwriter)
 * @method xmlwriter_end_cdata($xmlwriter)
 * @method xmlwriter_write_cdata($xmlwriter, $content)
 * @method xmlwriter_text($xmlwriter, $content)
 * @method xmlwriter_write_raw($xmlwriter, $content)
 * @method xmlwriter_start_document($xmlwriter, $version, $encoding, $standalone)
 * @method xmlwriter_end_document($xmlwriter)
 * @method xmlwriter_write_comment($xmlwriter, $content)
 * @method xmlwriter_start_dtd($xmlwriter, $qualifiedName, $publicId, $systemId)
 * @method xmlwriter_end_dtd($xmlwriter)
 * @method xmlwriter_write_dtd($xmlwriter, $name, $publicId, $systemId, $subset)
 * @method xmlwriter_start_dtd_element($xmlwriter, $qualifiedName)
 * @method xmlwriter_end_dtd_element($xmlwriter)
 * @method xmlwriter_write_dtd_element($xmlwriter, $name, $content)
 * @method xmlwriter_start_dtd_attlist($xmlwriter, $name)
 * @method xmlwriter_end_dtd_attlist($xmlwriter)
 * @method xmlwriter_write_dtd_attlist($xmlwriter, $name, $content)
 * @method xmlwriter_start_dtd_entity($xmlwriter, $name, $isparam)
 * @method xmlwriter_end_dtd_entity($xmlwriter)
 * @method xmlwriter_write_dtd_entity($xmlwriter, $name, $content)
 * @method xmlwriter_output_memory($xmlwriter, $flush)
 * @method xmlwriter_flush($xmlwriter, $empty)
 * @method opcache_reset()
 * @method opcache_invalidate($script, $force)
 * @method opcache_compile_file($file)
 * @method opcache_is_script_cached($script)
 * @method opcache_get_configuration()
 * @method opcache_get_status($fetch_scripts)
 * @method xdebug_get_stack_depth()
 * @method xdebug_get_function_stack()
 * @method xdebug_get_formatted_function_stack()
 * @method xdebug_print_function_stack($message, $options)
 * @method xdebug_get_declared_vars()
 * @method xdebug_call_class($depth)
 * @method xdebug_call_function($depth)
 * @method xdebug_call_file($depth)
 * @method xdebug_call_line($depth)
 * @method xdebug_var_dump($var)
 * @method xdebug_debug_zval($var)
 * @method xdebug_debug_zval_stdout($var)
 * @method xdebug_enable()
 * @method xdebug_disable()
 * @method xdebug_is_enabled()
 * @method xdebug_break()
 * @method xdebug_start_trace($fname, $options)
 * @method xdebug_stop_trace()
 * @method xdebug_get_tracefile_name()
 * @method xdebug_get_profiler_filename()
 * @method xdebug_dump_aggr_profiling_data($prefix)
 * @method xdebug_clear_aggr_profiling_data()
 * @method xdebug_memory_usage()
 * @method xdebug_peak_memory_usage()
 * @method xdebug_time_index()
 * @method xdebug_start_error_collection()
 * @method xdebug_stop_error_collection()
 * @method xdebug_get_collected_errors($clear)
 * @method xdebug_start_function_monitor($functions_to_monitor)
 * @method xdebug_stop_function_monitor()
 * @method xdebug_get_monitored_functions($clear)
 * @method xdebug_start_code_coverage($options)
 * @method xdebug_stop_code_coverage($cleanup)
 * @method xdebug_get_code_coverage()
 * @method xdebug_code_coverage_started()
 * @method xdebug_get_function_count()
 * @method xdebug_dump_superglobals()
 * @method xdebug_get_headers()
 * @method dl($extension_filename)
 * @method cli_set_process_title($title)
 * @method cli_get_process_title()
 */
trait InternalFunctionTrait
{
    /**
     * @param string $name
     * @param array $arguments
     * @return Func
     * @throws \Exception
     */
    protected static function handleInternalFunctionCall(string $name, array $arguments): Func
    {
        if (function_exists($name)) {
            return Func::call($name, $arguments);
        }

        if ('eval' === $name) {
            return Func::call($name, $arguments);
        }

        throw new \Exception('Unknown internal function: ' . $name);
    }
}
