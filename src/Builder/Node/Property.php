<?php
/**
 * Copyright (c) 2017 JD Williams
 *
 * This file is part of PHP-Genny, a library built by JD Williams. PHP-Genny is free software; you can
 * redistribute it and/or modify it under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 3 of the License, or (at your option) any later version.
 *
 * PHP-Genny is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
 * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
 * Public License for more details. You should have received a copy of the GNU Lesser General Public
 * License along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * You should have received a copy of the GNU General Public License along with Unify. If not, see
 * <http://www.gnu.org/licenses/>.
 */

declare(strict_types=1);

namespace JDWil\PhpGenny\Builder\Node;

use JDWil\PhpGenny\Builder\Node\Traits\DocBlockTrait;
use JDWil\PhpGenny\Builder\Node\Traits\NestedNodeTrait;
use JDWil\PhpGenny\Builder\Node\Traits\NodeBehaviorTrait;
use JDWil\PhpGenny\Builder\Node\Traits\VisibilityTrait;
use JDWil\PhpGenny\ValueObject\InternalType;
use JDWil\PhpGenny\ValueObject\Visibility;
use PhpParser\Comment\Doc;
use PhpParser\Node\Stmt\PropertyProperty;

class Property extends AbstractNode implements HasNodeBehaviorInterface
{
    use NestedNodeTrait;
    use VisibilityTrait;
    use DocBlockTrait;
    use NodeBehaviorTrait;

    /**
     * @var string
     */
    protected $name;

    /**
     * @var bool
     */
    protected $static;

    /**
     * @var AbstractNode
     */
    protected $default;

    /**
     * @var InternalType|Class_
     */
    protected $type;

    public static function new(string $name)
    {
        $ret = new Property();
        $ret->name = $name;
        $ret->static = false;
        $ret->visibility = Visibility::isPublic();

        return $ret;
    }

    /**
     * @return Class_|Trait_
     * @throws \Exception
     */
    public function done()
    {
        if (!$this->parent instanceof Class_ && !$this->parent instanceof Trait_) {
            throw new \Exception('Parent of Property must be an instance of Class_ or Trait_');
        }

        return $this->parent;
    }

    public function makeStatic()
    {
        $this->static = true;

        return $this;
    }

    public function setDefault(AbstractNode $default)
    {
        $this->default = $default;

        if ($this->autoGenerateDocBlocks && $default instanceof Scalar) {
            $this->setType($default->getResultType());
        }

        return $this;
    }

    public function setType($type)
    {
        $this->type = $type;

        if ($this->autoGenerateDocBlocks) {
            if ($type instanceof InternalType) {
                $this->setComments(['@var ' . (string)$type]);
            } else if ($type instanceof \JDWil\PhpGenny\Type\Class_) {
                $this->setComments(['@var ' . $type->getName()]);
            } else if (is_string($type)) {
                $this->setComments(['@var ' . $type]);
            }
        }

        return $this;
    }

    public function getStatements()
    {
        $flags = $this->addVisibilityFlags(0);

        if ($this->static) {
            $flags ^= \PhpParser\Node\Stmt\Class_::MODIFIER_STATIC;
        }

        $default = null;
        if (null !== $this->default) {
            $default = $this->default->getStatements();
        }

        $ret = new \PhpParser\Node\Stmt\Property(
            $flags, [new PropertyProperty($this->name, $default)]
        );

        if ($this->hasComment()) {
            $ret->setDocComment(new Doc($this->getComments()));
        }

        return $ret;
    }

    /**
     * @return array
     */
    public function getNodes(): array
    {
        return [
            'default' => $this->default
        ];
    }
}
