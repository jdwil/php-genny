<?php

require_once __DIR__ . '/../../vendor/autoload.php';

use JDWil\PhpGenny\Write\FileWriter;
use JDWil\PhpGenny\Type\File;
use JDWil\PhpGenny\Type\Class_;
use JDWil\PhpGenny\Type\Method;
use JDWil\PhpGenny\ValueObject\Visibility;
use JDWil\PhpGenny\ValueObject\InternalType;
use JDWil\PhpGenny\Builder\Node\Variable;
use JDWil\PhpGenny\Builder\Node\Scalar;
use JDWil\PhpGenny\Builder\Builder;
use JDWil\PhpGenny\Builder\Node\Property;
use JDWil\PhpGenny\Builder\Node\Parameter;
use JDWil\PhpGenny\Builder\Node\Type;
use JDWil\PhpGenny\Builder\Node\Cast;
use JDWil\PhpGenny\Builder\Node\ResultOf;

$c = new Class_('Foo');
$oc = new Class_('Widget');
$oc->setNamespace('Path\\To');

$c->setNamespace('Other\\Path\\To');
$c->addConstant('MY_CONST', Scalar::int(0));
$c->addProperty(new \JDWil\PhpGenny\Type\Property('bar', Visibility::isProtected(), 'Widget', $oc));
$c->addProperty(new \JDWil\PhpGenny\Type\Property('baz', Visibility::isPrivate(), InternalType::string(), Scalar::string('default')));

$m = new Method('doSomething');
$m->addParameter(
    new \JDWil\PhpGenny\Type\Parameter('myStr', InternalType::string(), Type::null())
);
//$m->setReturnTypes([InternalType::string(), InternalType::int(), InternalType::float()]);
//$m->addReturnType(InternalType::string());
//$m->addReturnType(InternalType::null());
//$m->getBody()->return(Variable::named('this')->property('baz')->concat(Variable::named('myStr')));
//$m->getBody()->return(Scalar::int(1));
//$m->getBody()->return(Cast::toBool(ResultOf::is_int(Variable::named('myStr'))));
$m
    ->getBody()
    ->if(Variable::named('myStr')->isEqualTo(Scalar::string('default')))
        ->return(Type::true())
//    ->elseIf(Variable::named('myStr')->isEqualTo(Scalar::string('foo')))
//        ->return(Type::true())
//    ->else()
//        ->return(Type::false())
    ->done()
    ->execute(Variable::named('x')->equals(Scalar::int(3)))
;
$c->addMethod($m);

$b = new Builder();
$b->preferDefaultsSetInConstructor();
$b->autoGenerateDocBlocks();
$b->useStrictTypes();
$b->buildClass($c);

//$writer = new FileWriter();
//$result = $writer->generateCode($b->getStatements());

$prettyPrinter = new \PhpParser\PrettyPrinter\Standard();

$result = $prettyPrinter->prettyPrintFile($b->getStatements());

echo $result . "\n\n";
