<?php

require_once __DIR__ . '/../../vendor/autoload.php';

use JDWil\PhpGenny\Write\FileWriter;
use JDWil\PhpGenny\Type\File;
use JDWil\PhpGenny\Type\Class_;
use JDWil\PhpGenny\Type\Method;
use JDWil\PhpGenny\ValueObject\Visibility;
use JDWil\PhpGenny\ValueObject\InternalType;
use JDWil\PhpGenny\Builder\Node\Variable;
use JDWil\PhpGenny\Builder\Node\Scalar;
use JDWil\PhpGenny\Builder\Builder;
use JDWil\PhpGenny\Builder\Node\Property;
use JDWil\PhpGenny\Builder\Node\Type;
use JDWil\PhpGenny\Builder\Node\Cast;
use JDWil\PhpGenny\Builder\Node\ResultOf;
use JDWil\PhpGenny\Builder\Node\NewInstance;
use JDWil\PhpGenny\Builder\Node\Logic;
use JDWil\PhpGenny\Type\Parameter;
use JDWil\PhpGenny\Type\Interface_;

$b = new Builder();
$b
    ->execute(Type::true())
    ->execute(Type::false())
    ->execute(Type::null())
    ->execute(Type::array())
    ->execute(Type::array([Scalar::string('foo'), Scalar::string('bar')], false))
    ->execute(Type::list(Variable::named('x'), Variable::named('y'))->equals(Variable::named('array')))
;

$prettyPrinter = new \PhpParser\PrettyPrinter\Standard();

$result = $prettyPrinter->prettyPrintFile($b->getStatements());
echo $result . "\n";
die();

$method = new Method(
    'doSomethingAwesome',
    Visibility::isPublic(),
    $final = false,
    $abstract = false,
    [
        new Parameter('myInput', InternalType::string(), 'defaultValue')
    ]
);

$method
    ->getBody()
    ->echo('I am awesome')
    ->newLine()
    ->return(Variable::named('myInput'))
;

$interface = new Interface_('IsAwesomeInterface');
$interface->setNamespace('Path\\To\\Interfaces');
$interface->addMethod($method);

$class = new Class_('MyClass');
$class->setNamespace('Path\\To\\Classes');
$class->implements($interface);

$b = new \JDWil\PhpGenny\Builder\BuilderFactory();
$b->preferDefaultsSetInConstructor();
$b->autoGenerateDocBlocks();
$b->useStrictTypes();
$builder = $b->constructInterfaceBuilder($interface);

//$writer = new FileWriter();
//$result = $writer->generateCode($b->getStatements());

$prettyPrinter = new \PhpParser\PrettyPrinter\Standard();

$result = $prettyPrinter->prettyPrintFile($builder->getStatements());

echo $result . "\n\n";

$builder = $b->constructClassBuilder($class);
echo $prettyPrinter->prettyPrintFile($builder->getStatements()) . "\n\n";
